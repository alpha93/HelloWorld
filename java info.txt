Static interface methods are not inherited in other interfaces or classes. So static interface methods cannot be abstract i.e they must be defined.

-----------------------------------------------------------------------------

Class static methods however are inherited in other classes. Static methods are never abstract in classes as well, because they exit independently of any objects of the class. So a method can never be both static and abstract.

Also a method can never be both abstract and final.

-----------------------------------------------------------------------------

Static methods are not overriden (so they are final by default). So for example if a superclass and a subclass both define the same static method, they will be treated as separate methods of each class.

-----------------------------------------------------------------------------

The way to make a CONCRETE class non-instantiable is to define its constructor to be private:

class A {
	private A() {}

	/*...
	instance variables & methods
	...*/
}

classic Example is the java.lang.System class.

-----------------------------------------------------------------------------

* Alternate way of refering to a static member(variable or method) of a class is to use an object reference variable (instead of the class name) of that class. This is especially useful for abstract classes.

abstract class A {
	static void show() {
		System.out.println("hello");
	}
}

class Main {
	public static void main(String args[]) {
		A ob = null; //ob needs to be initialized to be used
		ob.show();
	}
}

This is how System.in, System.out and System.err works

-----------------------------------------------------------------------------

Rules of method overloading:
*All the overloaded methods must have the same name.
*The parameters of the methods must be different either in terms of number and/or type and/or order.
*while the return types may differ, it doesnâ€™t play a role in distinguishing an overloaded
method from another. Also each overloaded method may or may not have their independent
throws clause.

Rules of method Overriding:
*The overridden method and the overriding method must have the same signature(name and
parameters).
*The return type of the overriding method can be the same as the overridden method or a
subclass of the return type of the overridden method for reference types. In case of primitive
types it has to be the same for both.
*In case the exception is a checked exception in the throws clause of the overridden method,
any exception that is the same or a subclass of that exception is allowed in the throws clause
of the overriding method.
It is also valid to declare any of the unchecked exceptions in the throws clause of the
overriding method or even omit the throws clause altogether. Its applicable to both checked
and unchecked exceptions in the throws clause of the overridden method.

-----------------------------------------------------------------------------
